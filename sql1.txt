show databases;

use sakila;
show tables;
#select * from actor;
select * from customer;
select customer_id, first_name,email from customer;
select * from customer;
select 12+4 as result;
select 12/3 as div1;
select power(2,3) as div1;

use sakila;
select * from customer where store_id = 1 and active =0;
select * from customer where store_id = 1 or active =0;
select * from customer where store_id <> 1;
select * from customer where store_id = 1 and active =0;
select * from customer where store_id >1 and  address_id between 257 AND 288;
-- select * from customer where email like 'M'; worng code 

select * from customer where address_id in (2,3,4,5,6);
select * from customer where 1 in (store_id);
select 3 not in (2,3,4,54,6);
select * from customer where 1 not in (store_id);
select * from customer where active not in (1);
select * from customer where email like 'M%';
select * from customer where customer_id<=10 and customer_id not in (5,7);
select * from customer where first_name like '%a';
select * from customer where first_name like '_a';
select * from actor;
select * from customer where first_name like '_f';
select sum(actor_id) as s from actor;
select extract(month from now());

select first_name, extract(month from create_date) from customer;
select utc_time();
select time(create_date) from customer;
select date(create_date) from customer;
select dayofyear('2006-05-14 22:04:36');
select dayofyear(create_date) from customer;
select dayname(now()) as today_is;
select monthname(payment_date) as month_name from payment;
select weekday(now()) as week_day;
select monthname(now()) ;
select adddate(now(),interval 10 month);
select adddate(now(),interval 10 day);
select adddate(now(),interval 10 hour);
select datediff(now(),'2006-05-14 22:04:36');
select subdate(now(),2);
select abs(-1) as result;
select ceil(12.1) as result;
select floor(8.4) as result;
select power(5,65) as result;
select mod(100,10) as result;
select rand() as result;



-- string function-- 
select length('vinod is super') as result;
select char_length("vinod is super") as result;
select locate('s','vinod is super') as result;
select substr("vinod is god",3,6) as result;
select trim("   vinod       is    good  ") as result;
select rtrim("        vinod   is good          fd     ") as remove_space;
select ltrim("        vinod   is good          fd             ") as remove_space;
select replace("abababbab","b","_") as result;
select reverse("        vinod   is good          fd     ") as remove_space;


use sakila;
select substr(first_name,locate('a',first_name)+1,2) as filter from customer ;


-- order by--
select * from customer
order by first_name asc;

-- second heigest customer id from customer table
select customer_id from customer
order by customer_id desc
limit 1 offset 1;

-- group by,having,join
show databases;
select * from sales;
  

 


use sakila;
show tables;
select payment.customer_id, customer.first_name, sum(payment.amount) from payment inner join customer on customer.customer_id = payment.customer_id group by payment.customer_id;
select * from inventory;
use sakila;
show tables;
select * from payment;

select (customer_id * customer.address_id) from customer; 

select c1.first_name AS firstcustomer,c2.first_name AS sameaddresscustomer from customer c1  LEFT JOIN customer c2 on (c1.address_id = c2.address_id and c1.customer_id <> c2.customer_id);
select * from customer cross join payment;
--  select * from customer full join payment;not working
-- select * from t1
-- union
-- select * from t2;


-- select store_id from customer
-- union
-- select store_id from store;


select store_id from customer
union
select store_id from store;



-- sub query

select first_name from customer where address_id=(select min(address_id) from customer);

-- find the customer name who is having highest address id 
select first_name from customer where address_id=(select max(address_id) from customer);

-- quetion: find second heiest
select first_name from customer
 where address_id=(select max(address_id) from customer 
 where address_id<(select max(address_id) from customer));
 
 
 select first_name from customer
 where address_id=(select max(address_id) from customer 
 where address_id<6)   limit 1 offset 1;
 
 

  
  -- find of sum reson bys
 --  select * from payment;
--   
--   select max(amount)   where amount in
--   (select sum(amount) as total from payment   group by customer_id );

  select sum(amount) from payment   group by customer_id ;
  
    select sum(amount)  from payment   group by customer_id 
    having sum(amount)=(select max(total) from  (  select sum(amount) as total  from payment   group by customer_id )as sub )  ;

  select sum(amount) from payment   group by customer_id order by sum(amount) desc limit 1 offset 1;
  
  select max(result)  where result =(
     select sum(amount) as result  from payment   group by customer_id 
    having sum(amount)<(select max(total) from  (  select sum(amount) as total  from payment   group by customer_id )as sub ))   ;


SELECT MAX(result) 
FROM (
  SELECT SUM(amount) AS result  
  FROM payment 
  GROUP BY customer_id 
  HAVING SUM(amount) < (
    SELECT MAX(total) 
    FROM (
      SELECT SUM(amount) AS total  
      FROM payment 
      GROUP BY customer_id
    ) AS sub
  )
) AS final_result;


 
 show databases;
use sakila;
select * from film_actor;
select * from film;
select f.film_id , f.title,f.release_year, fa.actor_id from film as f 
join film_actor as fa
where fa.film_id=f.film_id;
-- select * from film_actor

select f.actor_id ,fi.title from film_actor f join film as fi where f.film_id =fi.film_id;

create table employee81(eid int,ename varchar(20),managerid int);
insert into employee81(eid, ename, managerid)  values(10,"yash",null),(11,"amam",10),(12,"naina",10),(13,"happy singh",11);
select * from employee81;

select e.eid,e.ename,e.managerid,mgr.ename from employee81 as e join employee81 as mgr where e.managerid=mgr.eid;

CREATE TABLE Movies (
    movie_id INT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    release_year INT,
    sequel_of INT,  -- this points to another movie_id in the same table
    FOREIGN KEY (sequel_of) REFERENCES Movies(movie_id)
);
INSERT INTO Movies (movie_id, title, release_year, sequel_of) VALUES
(1, 'The Matrix', 1999, NULL),
(2, 'The Matrix Reloaded', 2003, 1),
(3, 'The Matrix Revolutions', 2003, 2),
(4, 'Avatar', 2009, NULL),
(5, 'Avatar: The Way of Water', 2022, 4);


select * from movies;

select m.movie_id,mv.title from movies as m left join movies as mv on m.sequel_of = mv.movie_id;





-- inner join 
     -- table join table 2  where clause
     -- table inner join table  on clouse
     -- table inner join table 2 using clouse  if both table have same collom
select f.actor_id ,fi.title from film_actor f join film as fi where f.film_id =fi.film_id;  
select f.actor_id ,fi.title from film_actor f inner join film as fi on f.film_id =fi.film_id;
select f.actor_id ,fi.title from film_actor f inner join film as fi using (film_id);
select * from actor;


select f.actor_id ,count(fi.film_id) from film_actor as f join film as fi where f.film_id =fi.film_id group by f.actor_id;

select a.actor_id,a.first_name ,f.title from actor as a 
join film_actor as fa on a.actor_id =a.actor_id
 join film as f on f.film_id = fa.film_id;


select a.actor_id ,a.first_name,f.film_id, f.title from actor as a
 inner join film_actor fa on a.actor_id=fa.actor_id 
 inner join film as f on f.film_id=fa.film_id;


use world;
show databases;
use world;
show tables;
select * from city;
select * from country;
select * from countrylanguage;

select * from city;

select c.District,c.name from city as c where district not like "%noord%";
select c.name,count(ci.name) from country as c join city as ci on c.code=ci.CountryCode  where c.population > 150000 group by c.name;
select c.District , count(c.name) from city as c  group by c.District having count(c.name) >2;
select ci.name,ci.countrycode,co.name from city as ci join country as co on co.code=ci.countrycode where co.population>15000;
select  ci.District , sum(ci.population) from city as ci group by ci.countrycode,ci.district;
select co.continent , count(co.name) from country as co where co.indepyear>1920  group by co.continent ;
select co.region, avg(co.surfacearea),sum(co.population),avg(co.lifeexpectancy),count(continent) from country as co group by co.region;



select code ,name,if(name="aruba","terrorcountry",if(name="Angola","terrost","toursm")) from country ;



-- case 
-- when condition then expression
-- when cconditio then expression 2 
-- else expression
-- end

select code ,name,
case 
when name="aruba" then "terror contru"
when name ="angola" then "terrorist"
else "trouism"
end as "status"
from country;

select count(indepyear),count(ifnu-- ll(indepyear,0)) from country;
-- select name,continent,nullif(length(name),length(continent)) from country;
-- select name,population,
--   case 
--   when population>2000000 then "developed country"
when population >10000 then "developing country"
else "under developed"
end as countryStaus
from country;







     
	
    -- subquery


use world;
select * from city;
select * from country;

select name,population from city where population>1780000;
-- subquery
select name,population from city where population>(select population from city where name='kabul');
select max(population) from city;
select max(population) from city where population <(select max(population) from city);
select district from city where name = 'amsterdam';
select name,district from city where district='Noord-Holland';
select name ,district from city where district =(select district from city where name = 'amsterdam');

select code ,name from country where continent =(select continent from country where name = 'Albania');
select continent ,name from country where lifeexpectancy =(select lifeexpectancy from country where name = 'Cook Islands');
select code ,continent,gnp from country where region <> (select region from country where name = 'benin');

-- types of subquery 
      -- single row subquery
      -- multi row subquery   there is no use of =,<,>!,== operators
      
-- multi row subquery(in where name in ('afrika','india')

select name,population,continent from country where continent = "europe";
select name,population,continent from country where name in (select name from country where continent = "europe");
select code ,name from country where lifeexpectancy =(select lifeexpectancy from country where name = 'bahamas');

use sakila;
select payment_id,customer_id,amount from payment
where amount <=any (select amount from payment where payment_id = 2 or payment_id=3 or payment_id=5);

select payment_id,customer_id,amount from payment
where amount <all (select amount from payment where payment_id = 2 or payment_id=3 or payment_id=5);

select payment_id,customer_id,amount from payment
where amount >all (select amount from payment where payment_id = 2 or payment_id=3 or payment_id=5);

use world;
select * from country;
select name,population from country where population >all (select population from country where continent='north america'); 

select code ,name,continent from country where lifeexpectancy in (select lifeexpectancy from country where continent = 'europe');

select count(*) from country where indepyear >any  (select indepyear from country where continent = 'asia') 
and continent <> 'asia';;

select name,population from world.country;
select name,population,(select population from country where name='anguilla')from country;







select * from country order by region desc,surfacearea asc;











create database regex1;
use regex1;
CREATE TABLE Departments (
    DeptID INT PRIMARY KEY,
    DeptName VARCHAR(100)
);

INSERT INTO Departments (DeptID, DeptName) VALUES
(1, 'Engineering'),
(2, 'Marketing'),
(3, 'HR');
select * from departments;


CREATE TABLE Employees (
    EmpID INT PRIMARY KEY,
    EmpName VARCHAR(100),
    Salary DECIMAL(10, 2),
    DeptID INT,
    FOREIGN KEY (DeptID) REFERENCES Departments(DeptID)
);

INSERT INTO Employees (EmpID, EmpName, Salary, DeptID) VALUES
(1, 'Alice', 70000, 1),
(2, 'Bob', 60000, 1),
(3, 'Charlie', 50000, 1),
(4, 'Diana', 55000, 2),
(5, 'Eve', 65000, 2),
(6, 'Frank', 40000, 3);



select * from employees;


select empid,empname,deptid,salary from employees where (salary,deptid) in (select avg(salary),deptid from employees group by deptid);
 select e1.empid,e1.empname,e1.deptid,e1.salary from employees as e1 where e1.salary > ( select avg(salary) from employees as e2 where e1.deptid=e2.deptid);

-- select empid,empname,deptid,salary from employees where empid in ( select empid from employees where selery > (salary,deptid) in (select avg(salary),deptid from employees group by deptid);


create database regex2;
use regex2;
CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    StudentName VARCHAR(100),
    Department VARCHAR(50)
);

INSERT INTO Students (StudentID, StudentName, Department) VALUES
(1, 'Alice', 'Computer Science'),
(2, 'Bob', 'Computer Science'),
(3, 'Charlie', 'Mathematics'),
(4, 'Diana', 'Mathematics'),
(5, 'Eve', 'Physics');


CREATE TABLE Courses (
    CourseID INT PRIMARY KEY,
    CourseName VARCHAR(100),
    Department VARCHAR(50)
);

INSERT INTO Courses (CourseID, CourseName, Department) VALUES
(101, 'Data Structures', 'Computer Science'),
(102, 'Algorithms', 'Computer Science'),
(201, 'Calculus', 'Mathematics'),
(202, 'Linear Algebra', 'Mathematics'),
(301, 'Quantum Mechanics', 'Physics');

select * from Students;
select *  from Courses;

--   last table
CREATE TABLE Enrollments (
    StudentID INT,
    CourseID INT,
    Grade DECIMAL(5, 2),
    PRIMARY KEY (StudentID, CourseID),
    FOREIGN KEY (StudentID) REFERENCES Students(StudentID),
    FOREIGN KEY (CourseID) REFERENCES Courses(CourseID)
);

INSERT INTO Enrollments (StudentID, CourseID, Grade) VALUES
(1, 101, 88.5),
(1, 102, 92.0),
(2, 101, 76.0),
(2, 102, 81.5),
(3, 201, 85.0),
(3, 202, 90.0),
(4, 201, 78.0),
(4, 202, 82.5),
(5, 301, 91.0);


select * from Courses;
-- Students

SELECT 
    s.StudentID,
    s.StudentName,
    s.Department,
    c.CourseName
FROM Students s
JOIN Enrollments e ON s.StudentID = e.StudentID
JOIN Courses c ON e.CourseID = c.CourseID;

SELECT 
    s.StudentID,
    s.StudentName,
    s.Department,
    c.CourseName
FROM Students s join 


SELECT 
    s.StudentName,
    (SELECT AVG(e.Grade) 
     FROM Enrollments e 
     WHERE e.StudentID = s.StudentID) AS AvgGrade
FROM Students s;



use sakila;
select * from payment;
select * from customer;

select p.payment_id, c.first_name, month(p.payment_date) ,p.last_update from payment as p join customer as c where customer_id =


















use sakila;
create table studentaccess( id int,sname varchar(10));
insert into studentaccess value(1,'vinod');
insert into studentaccess(id) value(1);
insert into studentaccess(id,sname) value(1,'rahul');  -- best prectics
select * from studentaccess;

-- drop tables/remove tables 
drop table studentaccess;
create table studentaccess( id int,sname varchar(10),age int);
insert into studentaccess value(1,'vinod',34);
insert into studentaccess(id) value(1);
insert into studentaccess(id,sname) value(1,'rahul'); 
select * from studentaccess;
-- create or replace table studentaccess(id int , sname varchar(10),age int);   not work


-- update table
update studentaccess set sname='sunil';
select * from studentaccess;
insert into studentaccess(id,sname) value(2,'rahul'); 
select * from studentaccess;
update studentaccess set sname='vinod' where id=2;
select * from studentaccess;
update studentaccess set id=2 where age = NULL;
select * from studentaccess;
update studentaccess set id=2 where id between 1 and 3; 
select * from studentaccess;
-- we can use all operators in where 


drop table studentaccess;
create table studentaccess( id int,sname varchar(10),age int);
insert into studentaccess value(1,'vinod',34);
select * from studentaccess;
delete from studentaccess;
select * from studentaccess;
insert into studentaccess value(1,'vinod',34);
insert into studentaccess value(2,'rahul',24);
insert into studentaccess value(3,'mohit',22);
delete from studentaccess where id between 1 and 2;
select * from studentaccess;


-- merge    * not work in mysql

-- merge into table using referencetable
-- when condition then statement (inser/update/delete)


-- delete rows or table data remeaber the structure of the table

truncate table studentaccess;  -- delete  table structure then recreate table structure ones again thats why it comes in ddl
select * from studentaccess; 


-- datatypes
create table test18 (id tinyint);
insert into test18 values(10);
insert into test18 values(-128);
insert into test18 values(-129);   -- size is smaller 1 byte 2^8 =256 (-128 to 127)

create table test19 (id tinyint unsigned); -- unsigned = only positive values ( 0-255 range)
insert into test19 values(10);
insert into test19 values(255);
insert into test19 values(256);
insert into test19 values(-128);

-- small int ,mediumint , int ,bigint



-- constraint

-- not null constraint
drop table studentaccess;
create table studentaccess( id int,sname varchar(10),age int not null);
insert into studentaccess value(1,'vinod',null);
select * from studentaccess;


-- default constraint
drop table studentaccess;
create table studentaccess( id int default 0,salary int not null);
insert into studentaccess(salary) value(5000);
select * from studentaccess;


-- unique constraint
drop table studentaccess;
create table studentaccess( id int default 0,salary int default 500 unique );
insert into studentaccess(salary) value(5000);
insert into studentaccess(id) value(5000);
insert into studentaccess(id) value(5000);
select * from studentaccess;




-- primary constraint
drop table studentaccess;
create table studentaccess( id int primary key,salary int   );  -- only one primary key is allow
insert into studentaccess(id) value(5);
insert into studentaccess(id) value(5);
select * from studentaccess;



-- foreign constraint
drop table studentaccess;
create table studentinfo( sid int primary key,sname varchar(20), courseid int, foreign key(courseid) references courses(course_id)) ;
create table courses( course_id int primary key,cname varchar(20));
insert into courses values(10,'dsa'),(11,'python');
insert into studentinfo value(1,'vinod',10);
insert into studentinfo value(2,'vinod',12);

select * from studentaccess;



-- foreign constraint
drop table studentaccess;
create table studentinfo( sid int,sname varchar(20), courseid int, foreign key(courseid) references courses(course_id),foreign key(sid) references courses(studentid)) ;
create table courses( course_id int,cname varchar(20),studentid int,primary key(course_id,studentid) );
insert into courses values(10,'dsa',1),(11,'python',1);
insert into studentinfo value(1,'vinod',10);
insert into studentinfo value(2,'vinod',12); -- error becasue there is no course of id 12

select * from studentaccess;



-- foreign constraint
drop table studentinfo;
drop table courses;
create table studentinfo(sid int ,sname varchar(20),courseid int,primary key(sid,sname)) ;
insert into studentinfo value(1,'vinod',10);
insert into studentinfo value(1,'rahul',10);
insert into studentinfo value(2,'rahul',10);
select * from studentinfo;





-- foreign constraint
drop table studentinfo;
drop table courses;
create table studentinfo(sid int ,sname varchar(20),courseid int,foreign key() ;
insert into studentinfo value(1,'vinod',10);
insert into studentinfo value(1,'rahul',10);
insert into studentinfo value(2,'rahul',10);
select * from studentinfo;




